package net.spartanb312.base.gui;

import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GlStateManager;
import net.spartanb312.base.client.FontManager;
import net.spartanb312.base.core.setting.Setting;
import net.spartanb312.base.module.modules.client.ClickGUI;
import net.spartanb312.base.utils.graphics.RenderUtils2D;
import net.spartanb312.base.utils.graphics.font.CFontRenderer;

import java.awt.*;
import java.util.HashMap;

/**
 * Created by B_312 on 01/10/21
 */
public abstract class Component {

    public CFontRenderer font = FontManager.fontRenderer;
    public FontManager fontManager;
    public Minecraft mc = Minecraft.getMinecraft();
    public int x, y, width, height;
    protected static final HashMap<String, Float> storedHoverScaleLoops = new HashMap<>();
    protected static final HashMap<String, Integer> storedHovered = new HashMap<>();
    public Panel father;
    public boolean isExtended;
    public static boolean anyExpanded = false;
    public static float expandedX = 0.0f;
    public static float expandedY = 0.0f;
    public static float expandedEndX = 0.0f;
    public static float expandedEndY = 0.0f;
    public boolean expanded = false;
    public static Component instance;
    public static int colorMenuToggleThreader = 0;
    public static int colorMenuToggleThreader1 = 0;
    public static boolean isTyping = false;
    public static boolean shouldScroll = true;

    public Component() {
        instance = this;
    }

    public abstract void render(int mouseX, int mouseY, float translateDelta, float partialTicks);

    public abstract void bottomRender(int mouseX, int mouseY, boolean lastSetting, boolean firstSetting, float partialTicks);

    public abstract void onMouseClicked(int mouseX, int mouseY, int mouseButton);

    public void mouseReleased(int mouseX, int mouseY, int state) {
    }

    public void keyTyped(char typedChar, int keyCode) {
    }

    public void solvePos(boolean add) {
        this.x = father.x + (add ? 5 : 0);
        this.y = father.y;
    }


    public int getHoveredColor(int mouseX, int mouseY, int color) {
        if (isHovered(mouseX, mouseY, x, y, x + width, y + width)) {
            float[] hsbVals = new float[3];
            Color theColor = new Color(color);
            Color.RGBtoHSB(theColor.getRed(), theColor.getGreen(), theColor.getBlue(), hsbVals);
            float saturation = hsbVals[1] * 0.5f;
            return Color.getHSBColor(hsbVals[0], saturation, hsbVals[2]).getRGB();
        } else return color;
    }

    public boolean isHovered(int mouseX, int mouseY, float startX, float startY, float endX, float endY) {
        return RenderUtils2D.isMouseInRect(mouseX, mouseY, startX, startY, endX, endY);
    }

    public boolean isVisible() {
        return true;
    }

    public abstract String getDescription();

    public Setting<?> getSetting() {
        return null;
    }

    private void moduleSeparators(boolean isColorPanel) {
        GlStateManager.disableAlpha();

        if (ClickGUI.instance.moduleSeparatorFadeMode.getValue() == ClickGUI.ModuleSeparatorFadeMode.Left) {
            if (ClickGUI.instance.moduleSeparatorGlow.getValue()) {
                GlStateManager.disableAlpha();
                RenderUtils2D.drawCustomRect(x + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() - ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), (x + ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB());
                RenderUtils2D.drawCustomRect((x + ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue() - ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue() - ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(),  new Color(0, 0, 0, 0).getRGB());

                RenderUtils2D.drawCustomRect(x + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), (x + ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue()), (y + height + ClickGUI.instance.moduleSeparatorY.getValue()) + ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB());
                RenderUtils2D.drawCustomRect((x + ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue() - ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() + ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB());
                GlStateManager.enableAlpha();
            }
            RenderUtils2D.drawCustomLine(x + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), (x + ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), ClickGUI.instance.moduleSeparatorHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor());
            RenderUtils2D.drawCustomLine((x + ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue() - ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), ClickGUI.instance.moduleSeparatorHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor(), new Color(0, 0, 0, 0).getRGB());
        }
        else if (ClickGUI.instance.moduleSeparatorFadeMode.getValue() == ClickGUI.ModuleSeparatorFadeMode.Right) {
            if (ClickGUI.instance.moduleSeparatorGlow.getValue()) {
                GlStateManager.disableAlpha();
                RenderUtils2D.drawCustomRect(x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() - ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), (x + (width - 1) + ClickGUI.instance.moduleSeparatorX.getValue()) - ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB());
                RenderUtils2D.drawCustomRect((x + (width - 1) + ClickGUI.instance.moduleSeparatorX.getValue()) - ((Component.instance.width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue() - ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), x + ClickGUI.instance.moduleSeparatorX.getValue() + ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(),  new Color(0, 0, 0, 0).getRGB());

                RenderUtils2D.drawCustomRect(x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), (x + (width - 1) + ClickGUI.instance.moduleSeparatorX.getValue()) - ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue() + ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB());
                RenderUtils2D.drawCustomRect((x + (width - 1) + ClickGUI.instance.moduleSeparatorX.getValue()) - ((Component.instance.width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + ClickGUI.instance.moduleSeparatorX.getValue() + ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() + ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB());
                GlStateManager.enableAlpha();
            }
            RenderUtils2D.drawCustomLine( x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), (x + (width - 1) + ClickGUI.instance.moduleSeparatorX.getValue()) - ((width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), ClickGUI.instance.moduleSeparatorHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor());
            RenderUtils2D.drawCustomLine((x + (width - 1) + ClickGUI.instance.moduleSeparatorX.getValue()) - ((Component.instance.width - 1) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + ClickGUI.instance.moduleSeparatorX.getValue() + ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), ClickGUI.instance.moduleSeparatorHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor(), new Color(0, 0, 0, 0).getRGB());
        }
        else if (ClickGUI.instance.moduleSeparatorFadeMode.getValue() == ClickGUI.ModuleSeparatorFadeMode.Both) {
            if (ClickGUI.instance.moduleSeparatorGlow.getValue()) {
                GlStateManager.disableAlpha();
                RenderUtils2D.drawCustomRect(x + ClickGUI.instance.moduleSeparatorX.getValue() + ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() - ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), x + (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB());
                RenderUtils2D.drawCustomRect(x + ClickGUI.instance.moduleSeparatorX.getValue() + ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() + ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB());

                RenderUtils2D.drawCustomRect(x + (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() - ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), x + width - 1 - (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB());
                RenderUtils2D.drawCustomRect(x + (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + width - 1 - (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() + ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB());

                RenderUtils2D.drawCustomRect(x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue() - ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() - ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), x + width - 1 - (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB());
                RenderUtils2D.drawCustomRect(x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue() - ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + width - 1 - (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() + ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB());
                GlStateManager.enableAlpha();
            }
            RenderUtils2D.drawCustomLine( x + ClickGUI.instance.moduleSeparatorX.getValue() + ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), ClickGUI.instance.moduleSeparatorHeight.getValue(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor());
            RenderUtils2D.drawCustomLine(x + (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + width - 1 - (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), ClickGUI.instance.moduleSeparatorHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor());
            RenderUtils2D.drawCustomLine( x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue() - ClickGUI.instance.moduleSeparatorWidth.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + width - 1 - (((width - 1) / 2.0f) * ClickGUI.instance.moduleSeparatorFadeLength.getValue()) + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), ClickGUI.instance.moduleSeparatorHeight.getValue(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor());
        }
        GlStateManager.enableAlpha();
        if (ClickGUI.instance.moduleSeparatorFadeMode.getValue() == ClickGUI.ModuleSeparatorFadeMode.None) {
            if (ClickGUI.instance.moduleSeparatorGlow.getValue()) {
                GlStateManager.disableAlpha();
                RenderUtils2D.drawCustomRect(x, y + height + ClickGUI.instance.moduleSeparatorY.getValue() - ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB());
                RenderUtils2D.drawCustomRect(x, y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue() + ClickGUI.instance.moduleSeparatorGlowHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorGlowAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB()) : new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSeparatorGlowAlpha.getValue()).getRGB(), new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB());
                GlStateManager.enableAlpha();
            }
            RenderUtils2D.drawCustomLine(x, y + height + ClickGUI.instance.moduleSeparatorY.getValue(), x + width - 1 + ClickGUI.instance.moduleSeparatorX.getValue(), y + height + ClickGUI.instance.moduleSeparatorY.getValue(), ClickGUI.instance.moduleSeparatorHeight.getValue(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor(), isColorPanel ? (new Color(ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSeparatorColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSeparatorColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleSeparatorColor.getValue().getColor());
        }
    }

    private void panelSideGlow(boolean isColorPanel) {
        if (ClickGUI.instance.moduleSideGlow.getValue() != ClickGUI.ModuleSideGlow.None) {
            GlStateManager.disableAlpha();
            int panelSideGlowColor = isColorPanel ? new Color(ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSideGlowColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSideGlowColor.getValue().getAlpha()).getRGB() : ClickGUI.instance.moduleSideGlowColor.getValue().getColor();
            if (ClickGUI.instance.moduleSideGlow.getValue() == ClickGUI.ModuleSideGlow.Left || ClickGUI.instance.moduleSideGlow.getValue() == ClickGUI.ModuleSideGlow.Both) {
                RenderUtils2D.drawCustomRect(x, y, x + ClickGUI.instance.moduleSideGlowWidth.getValue(), y + height, new Color(0, 0, 0, 0).getRGB(), panelSideGlowColor,  panelSideGlowColor, new Color(0, 0, 0, 0).getRGB());
            }
            if (ClickGUI.instance.moduleSideGlow.getValue() == ClickGUI.ModuleSideGlow.Right || ClickGUI.instance.moduleSideGlow.getValue() == ClickGUI.ModuleSideGlow.Both) {
                RenderUtils2D.drawCustomRect(x + width - ClickGUI.instance.moduleSideGlowWidth.getValue(), y, x + width, y + height, panelSideGlowColor, new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), panelSideGlowColor);
            }
            GlStateManager.enableAlpha();
        }
    }

    public void drawSettingRects(boolean lastSetting, boolean isColorPanel) {
        if (!ClickGUI.instance.moduleSideGlowLayer.getValue()) {
            panelSideGlow(isColorPanel);
        }
        if (ClickGUI.instance.moduleSeparators.getValue() && !ClickGUI.instance.moduleSeparatorsOnTop.getValue() && !lastSetting) {
            moduleSeparators(isColorPanel);
        }

        RenderUtils2D.drawRect(x, y, x + width, y + height, isColorPanel ? (new Color(ClickGUI.instance.moduleBGColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleBGColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleBGColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleBGColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleBGColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.moduleBGColor.getValue().getColor());
        RenderUtils2D.drawRect(x + 1, y + 1, x + width - 1, y + height - ClickGUI.instance.extendedRectGap.getValue(), isColorPanel ? (new Color(ClickGUI.instance.extendedRectColor.getValue().getColorColor().getRed(), ClickGUI.instance.extendedRectColor.getValue().getColorColor().getGreen(), ClickGUI.instance.extendedRectColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.extendedRectColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.extendedRectColor.getValue().getAlpha()).getRGB()) : ClickGUI.instance.extendedRectColor.getValue().getColor());

        if (ClickGUI.instance.moduleSideGlowLayer.getValue()) {
            panelSideGlow(isColorPanel);
        }
        if (ClickGUI.instance.moduleSideGlow.getValue() != ClickGUI.ModuleSideGlow.None) {
            GlStateManager.disableAlpha();
            int panelSideGlowDoubleColor = isColorPanel ? new Color(ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.moduleSideGlowDoubleAlpha.getValue() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.moduleSideGlowDoubleAlpha.getValue()).getRGB() : new Color(ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getRed(), ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getGreen(), ClickGUI.instance.moduleSideGlowColor.getValue().getColorColor().getBlue(), ClickGUI.instance.moduleSideGlowDoubleAlpha.getValue()).getRGB();
            if (ClickGUI.instance.moduleSideGlowDouble.getValue() == ClickGUI.ModuleSideGlowDouble.Left) {
                RenderUtils2D.drawCustomRect(x, y, x + ClickGUI.instance.moduleSideGlowDoubleWidth.getValue(), y + height, new Color(0, 0, 0, 0).getRGB(), panelSideGlowDoubleColor,  panelSideGlowDoubleColor, new Color(0, 0, 0, 0).getRGB());
            }
            else if (ClickGUI.instance.moduleSideGlowDouble.getValue() == ClickGUI.ModuleSideGlowDouble.Right) {
                RenderUtils2D.drawCustomRect(x + width - ClickGUI.instance.moduleSideGlowDoubleWidth.getValue(), y, x + width, y + height, panelSideGlowDoubleColor, new Color(0, 0, 0, 0).getRGB(), new Color(0, 0, 0, 0).getRGB(), panelSideGlowDoubleColor);
            }
            GlStateManager.enableAlpha();
        }

        if (ClickGUI.instance.moduleSeparators.getValue() && ClickGUI.instance.moduleSeparatorsOnTop.getValue() && !lastSetting) {
            moduleSeparators(isColorPanel);
        }
    }

    public void renderHoverRect(String key, int mouseX, int mouseY, float startX, float startY, float endX, float endY, float yTopOffset, float yDownOffset, boolean moduleGap) {
        if (ClickGUI.instance.moduleHoverStuff.getValue()) {
            storedHovered.putIfAbsent(key, 0);
            storedHoverScaleLoops.putIfAbsent(key, 0.0f);
            if (isHovered(mouseX, mouseY, startX, startY, endX, endY)) {
                storedHovered.put(key, ClickGUI.instance.moduleHoverFadeFactor.getValue());
                if (ClickGUI.instance.moduleHoverScaleFade.getValue() != ClickGUI.HoverScaleFadeMode.None) {
                    storedHoverScaleLoops.put(key, 300.0f);
                }
            }
            if (storedHovered.containsKey(key)) {
                int hoverLoops = storedHovered.get(key);
                float hoverScaleLoops = storedHoverScaleLoops.get(key);
                int hoverAlpha = (int)(ClickGUI.instance.moduleHoverStartAlpha.getValue() * (hoverLoops / (float)ClickGUI.instance.moduleHoverFadeFactor.getValue()));
                if (hoverAlpha < 0) {
                    hoverAlpha = 0;
                }
                if (hoverScaleLoops < 0) {
                    hoverScaleLoops = 0;
                }
                GlStateManager.disableAlpha();
                Color hoveredRectColor = new Color(ClickGUI.instance.enabledColor.getValue().getColorColor().getRed(), ClickGUI.instance.enabledColor.getValue().getColorColor().getGreen(), ClickGUI.instance.enabledColor.getValue().getColorColor().getBlue(), ClickGUI.instance.enabledColor.getValue().getAlpha());
                RenderUtils2D.drawRect(ClickGUI.instance.moduleHoverScaleFade.getValue() == ClickGUI.HoverScaleFadeMode.Right || ClickGUI.instance.moduleHoverScaleFade.getValue() == ClickGUI.HoverScaleFadeMode.Both || ClickGUI.instance.moduleHoverScaleFade.getValue() == ClickGUI.HoverScaleFadeMode.All ? (startX + 1) + (endX - startX - 1) - (hoverScaleLoops * ((endX - startX - 1) / 300.0f)) : (startX + 1),
                        ClickGUI.instance.moduleHoverScaleFade.getValue() == ClickGUI.HoverScaleFadeMode.All ? (startY - 1 + yTopOffset + endY - startY - (hoverScaleLoops * ((endY - startY) / 300.0f))) : startY - 1 + yTopOffset,
                        ClickGUI.instance.moduleHoverScaleFade.getValue() == ClickGUI.HoverScaleFadeMode.Left || ClickGUI.instance.moduleHoverScaleFade.getValue() == ClickGUI.HoverScaleFadeMode.Both || ClickGUI.instance.moduleHoverScaleFade.getValue() == ClickGUI.HoverScaleFadeMode.All ? (startX + 1 + (hoverScaleLoops * ((endX - startX - 1) / 300.0f))) : (endX - 1),
                        ClickGUI.instance.moduleHoverScaleFade.getValue() == ClickGUI.HoverScaleFadeMode.All ? (startY - yDownOffset + (hoverScaleLoops * ((endY - startY) / 300.0f))) - (moduleGap ? ClickGUI.instance.moduleGap.getValue() : 0) : (endY - yDownOffset) - (moduleGap ? ClickGUI.instance.moduleGap.getValue() : 0),
                        new Color(hoveredRectColor.getRed(), hoveredRectColor.getGreen(), hoveredRectColor.getBlue(), hoverAlpha).getRGB());
                GlStateManager.enableAlpha();
                hoverLoops -= 1;
                storedHovered.put(key, hoverLoops);

                hoverScaleLoops -= hoverScaleLoops / (100.0f - ClickGUI.instance.moduleHoverScaleFadeFactor.getValue());
                storedHoverScaleLoops.put(key, hoverScaleLoops);

                if (storedHovered.get(key) <= 0) {
                    storedHovered.remove(key);
                }
            }
        }
    }

    public void drawExtendedLine(boolean lastSetting) {
        RenderUtils2D.drawCustomLine(x + (ClickGUI.instance.extendedWidth.getValue() / 2), y, x + (ClickGUI.instance.extendedWidth.getValue() / 2), y + height - (lastSetting && !ClickGUI.instance.extendedBottomExtensions.getValue() ? 1 : 0), ClickGUI.instance.extendedWidth.getValue(), ClickGUI.instance.extendedColor.getValue().getColor(), ClickGUI.instance.extendedColor.getValue().getColor());
    }

    public void drawExtendedLineColor(boolean lastSetting) {
        int extendedLineColorColor = new Color(ClickGUI.instance.colorDropMenuSideBarColor.getValue().getColorColor().getRed(), ClickGUI.instance.colorDropMenuSideBarColor.getValue().getColorColor().getGreen(), ClickGUI.instance.colorDropMenuSideBarColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.colorDropMenuSideBarColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.colorDropMenuSideBarColor.getValue().getAlpha()).getRGB();
        RenderUtils2D.drawCustomLine(x + (ClickGUI.instance.colorDropMenuSideBarWidth.getValue() / 2), y, x + (ClickGUI.instance.colorDropMenuSideBarWidth.getValue() / 2), y + height - (lastSetting && !ClickGUI.instance.colorDropMenuExtensions.getValue() ? 1 : 0), ClickGUI.instance.colorDropMenuSideBarWidth.getValue(), extendedLineColorColor, extendedLineColorColor);
    }

    public void drawColorMenuOutline(boolean lastSetting, boolean firstSetting, boolean isExtensionsOn) {
        int colorMenuOutlineColor = new Color(ClickGUI.instance.colorDropMenuOutlineColor.getValue().getColorColor().getRed(), ClickGUI.instance.colorDropMenuOutlineColor.getValue().getColorColor().getGreen(), ClickGUI.instance.colorDropMenuOutlineColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.colorDropMenuOutlineColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.colorDropMenuOutlineColor.getValue().getAlpha()).getRGB();
        RenderUtils2D.drawCustomLine(x + (ClickGUI.instance.colorDropMenuOutlineWidth.getValue() / 2), y, x + (ClickGUI.instance.colorDropMenuOutlineWidth.getValue() / 2), y + height - (lastSetting && !ClickGUI.instance.colorDropMenuExtensions.getValue() ? 1 : 0), ClickGUI.instance.colorDropMenuOutlineWidth.getValue(), colorMenuOutlineColor, colorMenuOutlineColor);
        RenderUtils2D.drawCustomLine(x + width - (ClickGUI.instance.colorDropMenuOutlineWidth.getValue() / 2), y, x + width - (ClickGUI.instance.colorDropMenuOutlineWidth.getValue() / 2), y + height - (lastSetting && !ClickGUI.instance.colorDropMenuExtensions.getValue() ? 1 : 0), ClickGUI.instance.colorDropMenuOutlineWidth.getValue(), ClickGUI.instance.colorDropMenuOutlineColor.getValue().getColor(), ClickGUI.instance.colorDropMenuOutlineColor.getValue().getColor());
        if (!isExtensionsOn) {
            if (firstSetting) {
                RenderUtils2D.drawCustomLine(x + (ClickGUI.instance.colorDropMenuOutlineWidth.getValue() / 2), y, x + width - (ClickGUI.instance.colorDropMenuOutlineWidth.getValue() / 2), y, ClickGUI.instance.colorDropMenuOutlineWidth.getValue(), colorMenuOutlineColor, colorMenuOutlineColor);
            }
            if (lastSetting) {
                RenderUtils2D.drawCustomLine(x + (ClickGUI.instance.colorDropMenuOutlineWidth.getValue() / 2), y + height, x + width - (ClickGUI.instance.colorDropMenuOutlineWidth.getValue() / 2), y + height, ClickGUI.instance.colorDropMenuOutlineWidth.getValue(), colorMenuOutlineColor, colorMenuOutlineColor);
            }
        }
    }

    public void drawExtendedGradient(boolean lastSetting, boolean isColorPanel) {
        int extendedGradientColor = isColorPanel ? new Color(ClickGUI.instance.extendedGradientColor.getValue().getColorColor().getRed(), ClickGUI.instance.extendedGradientColor.getValue().getColorColor().getGreen(), ClickGUI.instance.extendedGradientColor.getValue().getColorColor().getBlue(), ClickGUI.instance.colorDropMenuAnimate.getValue() ? (int)((ClickGUI.instance.extendedGradientColor.getValue().getAlpha() / 300.0f) * colorMenuToggleThreader1) : ClickGUI.instance.extendedGradientColor.getValue().getAlpha()).getRGB() : ClickGUI.instance.extendedGradientColor.getValue().getColor();
        if (ClickGUI.instance.extendedVerticalGradient.getValue()) {
            GlStateManager.disableAlpha();
            RenderUtils2D.drawCustomRect(x, y, x + ClickGUI.instance.extendedGradientWidth.getValue(), y + height - (lastSetting && !ClickGUI.instance.extendedBottomExtensions.getValue() ? 1 : 0), new Color(0, 0, 0, 0).getRGB(), extendedGradientColor, extendedGradientColor, new Color(0, 0, 0, 0).getRGB());
            GlStateManager.enableAlpha();
        }
    }

}
